[{"categories":["kubernetes"],"content":"Intro TIL a DNS config that exists in many kubernetes setups, including yours. ","date":"31-10-2021","objectID":"/til_ndots_k8s/:0:0","tags":["k8s","dns","pod","ndots","throttling"],"title":"Kubernetes DNS performance - ndots","uri":"/til_ndots_k8s/"},{"categories":["kubernetes"],"content":"Context Today I learned about ndots. ndots is a config parameter from /etc/resolv.conf which configures a threshold for the number of dots which must appear in a name given to res_query ","date":"31-10-2021","objectID":"/til_ndots_k8s/:1:0","tags":["k8s","dns","pod","ndots","throttling"],"title":"Kubernetes DNS performance - ndots","uri":"/til_ndots_k8s/"},{"categories":["kubernetes"],"content":"Scenario Depending on your Kubernetes setup, pods may contain the following content inside /etc/resolv.conf: search default.svc.cluster.local svc.cluster.local cluster.local nameserver 10.96.0.10 options ndots:5 Notice that ndots is set to 5 Now, imagine there’s a payments service (apiv1/service) and that other pods (N replicas) are sending requests to this payments service using the internal service url. i.e payments-svc.payments.svc.cluster.local:3000 (4 dots) The dns resolver, will then say “Hey, 4 dots is less than 5!” and then will hop into each of the nameservers until it find the right address default.svc.cluster.local svc.cluster.local cluster.local Now, thing that this other pods are sending 5k requests per second to the payments service. Sucks to be kube-dns (or core-dns), right? CPU throttling will skyrocket and services depending on payments will start to be slow. An immediate solution would be to add a dot (.) at the end of the URL payments-svc.payments.svc.cluster.local.:3000 This will tell the DNS resolver to look for the name as it is. ","date":"31-10-2021","objectID":"/til_ndots_k8s/:2:0","tags":["k8s","dns","pod","ndots","throttling"],"title":"Kubernetes DNS performance - ndots","uri":"/til_ndots_k8s/"},{"categories":["kubernetes"],"content":"Testing If you have prometheus running you can easily test this. Create a couple pods in namespace X and a service in namespace Y, then write a simple script to force DNS resolution and compare the results. i.e for i in {1..5000}; do nslookup app.y.svc.cluster.local}; done and then for i in {1..5000}; do nslookup app.y.svc.cluster.local.}; done ","date":"31-10-2021","objectID":"/til_ndots_k8s/:3:0","tags":["k8s","dns","pod","ndots","throttling"],"title":"Kubernetes DNS performance - ndots","uri":"/til_ndots_k8s/"},{"categories":["kubernetes"],"content":"References https://pracucci.com/kubernetes-dns-resolution-ndots-options-and-why-it-may-affect-application-performances.html https://man7.org/linux/man-pages/man5/resolv.conf.5.html ","date":"31-10-2021","objectID":"/til_ndots_k8s/:4:0","tags":["k8s","dns","pod","ndots","throttling"],"title":"Kubernetes DNS performance - ndots","uri":"/til_ndots_k8s/"},{"categories":["golang"],"content":"Intro Sometimes when you google for this, the answer is not quite clear and I also often forget how to do this. ","date":"12-05-2020","objectID":"/go_mongo_aggregations/:0:0","tags":["golang","mongodb","aggregation","pipelines"],"title":"Mongodb aggregations in Golang","uri":"/go_mongo_aggregations/"},{"categories":["golang"],"content":"Scenario Imagine the following dataset in a mongodb collection { _id: 1, cust_id: \"abc1\", ord_date: ISODate(\"2012-11-02T17:04:11.102Z\"), status: \"A\", amount: 50 } { _id: 2, cust_id: \"xyz1\", ord_date: ISODate(\"2013-10-01T17:04:11.102Z\"), status: \"A\", amount: 100 } { _id: 3, cust_id: \"xyz1\", ord_date: ISODate(\"2013-10-12T17:04:11.102Z\"), status: \"D\", amount: 25 } { _id: 4, cust_id: \"xyz1\", ord_date: ISODate(\"2013-10-11T17:04:11.102Z\"), status: \"D\", amount: 125 } { _id: 5, cust_id: \"abc1\", ord_date: ISODate(\"2013-11-12T17:04:11.102Z\"), status: \"A\", amount: 25 }  And we want to know the total count of prodcuts by order status. Group type OrderStatusTotal struct { ID string `bson:\"_id\"` Total int `bson:\"total\"` } pipelineResult := make([]OrderStatusTotal, 0) pipeline := make([]bson.M, 0) groupStage := bson.M{ \"$group\": bson.M{ \"_id\": \"$status\", \"total\": bson.M{\"$sum\": 1}, }, } pipeline = append(pipeline, groupStage) data, err := collection.Aggregate(ctx, pipeline) if err != nil { log.Println(err.Error()) fmt.Errorf(\"failed to execute aggregation %s\", err.Error()) return } err = data.All(ctx, \u0026pipelineResult) if err != nil { log.Println(err.Error()) fmt.Errorf(\"failed to decode results\", err.Error()) return } fmt.Printf(\"%+v\\n\", pipelineResult) } Group And Match type OrderStatusTotal struct { ID string `bson:\"_id\"` Total int `bson:\"total\"` } pipelineResult := make([]OrderStatusTotal, 0) pipeline := make([]bson.M, 0) groupStage := bson.M{ \"$group\": bson.M{ \"_id\": \"$status\", \"total\": bson.M{\"$sum\": 1}, }, } matchStage := bson.M{ \"$match\": bson.M{ \"cust_id\": \"abc1\", }, } pipeline = append(pipeline, matchStage,groupStage) data, err := collection.Aggregate(ctx, pipeline) if err != nil { log.Println(err.Error()) fmt.Errorf(\"failed to execute aggregation %s\", err.Error()) return } err = data.All(ctx, \u0026pipelineResult) if err != nil { log.Println(err.Error()) fmt.Errorf(\"failed to decode results\", err.Error()) return } fmt.Printf(\"%+v\\n\", pipelineResult) ","date":"12-05-2020","objectID":"/go_mongo_aggregations/:0:1","tags":["golang","mongodb","aggregation","pipelines"],"title":"Mongodb aggregations in Golang","uri":"/go_mongo_aggregations/"},{"categories":["golang"],"content":"Notes This is a super simple example, do not use in production In order to avoid many external dependencies I always create custom types for querying mongodb, e.g type DBQuery map[string]interface{} Avoid using empty interfaces, this only leads to nil pointers and type assertions Mongo aggregation docs Feedbacks are always welcome :) Full example can be found here ","date":"12-05-2020","objectID":"/go_mongo_aggregations/:0:2","tags":["golang","mongodb","aggregation","pipelines"],"title":"Mongodb aggregations in Golang","uri":"/go_mongo_aggregations/"}]